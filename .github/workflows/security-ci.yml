name: Security CI (SAST + SCA + DAST)

on:
  push:
    branches: [ "main", "develop", "feature/**" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  sast:
    name: SAST (Semgrep)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/ci
          args: --sarif --output=semgrep.sarif   #
         
    
      - name: Upload SARIF to Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep

   
      - name: Fail on High/Critical
        run: |
          set -e
          if grep -qi '"level": *"error"' semgrep.sarif; then
            echo "::error::SAST encontrou issues de alto risco."
            exit 1
          fi

  sca:
    name: SCA (OWASP Dependency-Check)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "ChallengeXP"
          path: "."
          format: "ALL"
          out: "reports"

      - name: Publicar relatórios SCA
        uses: actions/upload-artifact@v4
        with:
          name: sca-reports
          path: reports/

      - name: Falhar se houver High/Critical
        run: |
          set -e
          COUNT=$(xmlstarlet sel -t -v "count(/analysis/dependencies/dependency/vulnerabilities/vulnerability[severity='High' or severity='Critical'])" reports/dependency-check-report.xml || echo 0)
          echo "Vulns High/Critical: $COUNT"
          if [ "$COUNT" != "0" ] && [ "$COUNT" != "" ]; then
            echo "::error::SCA encontrou vulnerabilidades High/Critical."
            exit 1
          fi

  dast:
    name: DAST (OWASP ZAP contra localhost)
    runs-on: ubuntu-latest
    needs: [sast, sca]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - run: npm ci

      - name: Start app in background
        run: |
          nohup npm start >/tmp/app.log 2>&1 &
          for i in {1..30}; do
            curl -sf http://127.0.0.1:3000/health && break || sleep 2
          done
          curl -s http://127.0.0.1:3000/health || (echo "App não respondeu" && exit 1)

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: "http://127.0.0.1:3000"
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"

      - name: Salvar relatório ZAP
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            report_html.html
            owasp_zap.log

      - name: Falhar se Medium+
        if: always()
        run: |
          set -e
          if grep -E "Risk Level.*(Medium|High)" -i report_html.html; then
            echo "::error::DAST encontrou achados Medium/High."
            exit 1
          fi

  release_gate:
    name: Gate de Release + Notificação (simples)
    runs-on: ubuntu-latest
    needs: [dast]
    if: ${{ needs.dast.result == 'success' }}
    steps:
      - name: (Opcional) Notificar via Webhook
        run: |
          if [ -n "${{ secrets.SECURITY_WEBHOOK_URL }}" ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d '{"text":"✅ Pipeline seguro aprovado (SAST/SCA/DAST). Pronto para release!"}' \
              "${{ secrets.SECURITY_WEBHOOK_URL }}"
          else
            echo "Webhook não configurado (ok para iniciantes)."
          fi
